[
	{
		"id": 170,
		"name": "docker 的入门与使用1",
		"branchId": 60,
		"projectId": 47,
		"catelogId": 68,
		"creatorId": "269840",
		"modifiedId": "269840",
		"content": "![](https://blog.papercut.com/wp-content/uploads/2019/02/docker-logo-1024x597.png)\n\n> 图片来源：https://blog.papercut.com/wp-content/uploads/2019/02/docker-logo-1024x597.png\n\n[TOC]\n\n## 前言\n\nDocker 对于前端来说不是必须的，但是如果需要自己折腾前端工具、建站等，涉及到应用部署的话就必须要去了解下相关知识了。\n\n本文只是对 Docker 的入门，看完本文后会对 Docker 的概念以及如何使用 docker 有个初步的认知。\n\n对于前端来说，有个入门的认识应该就够了。\n\n## Docker 的概念\n\ndocker 音译过来是“容器”，但是 docker 有三大概念：\n\n- 镜像 image\n- 容器 container\n- 仓库 repository\n\n镜像和容器的关系就如 JS 中的类与实例。\n\n在 JS 中，我们常用的包管理工具 npm，我们会将 npm 包 `npm publish` 到免费的公共服务上。\n\n而 docker 的镜像就如同托管在远程服务的 npm 包一样，docker 也有托管服务 `Docker Hub`，我们可以创建自己的 **仓库** Respository，本地通过 `docker push <仓库/name:tag>`\n\n同理，我们通过 `npm install` 安装在本地 `node_modules` 中的包的“形态”，就类似 **容器** container。\n\n关于 docker 的其他概念或作用，网上都能找到，就不再赘述了。\n\n## 构建镜像\n\n譬如，我有一个需求，是将一个 npm 命令行工具构建成 docker 包，并 push 到远程仓库，提供给运维部署时用。\n\n首先我的思路有 2 种：\n\n> 该镜像必然依赖 node，暂且是 `node:latest` 好了，因为不需要考虑其他功能。\n\n1. 在本地 npm 包的根目录下构建 docker 镜像，将完整的包构建进去，这样就不用再下载了\n2. 构建空的镜像，其中包含一条执行命令，去安装该 npm 包\n\n于是，我去实践这 2 种思路。\n\n实践的结果当然只能是方案二合理，因为构建的 docker 包，虽然上下文指定了当前目录，但是并未将文件拷贝到对应的 root 的文件系统中。需要自己去 `COPY`，但是 copy 只能单个文件。\n\n想想 node_modules 吧，因为 npm 命令行工具依赖。\n\n于是乎，将 npm 包压缩成一个 zip 包后再 copy 到文件系统中似乎可行。的确如此！但是 copy 的过程也是很慢的，node_modules 的嵌套依赖太过庞大。\n\n所以总的来看，通过在 node 容器中，执行安装命令**清晰易懂**\n\n构建命令：\n\n```\n# -t 表示指定要创建的目标镜像名\n# tag 默认为 latest\n# context 表示构建上下文，下文会说\ndocker build -t <name:tag> <context>\n```\n\n## 操作本地镜像\n\n查看本地镜像\n\n```\ndocker images\ndocker image ls\n```\n\n> 有时候会出现 <none> 的镜像，可以使用 docker image prune 清除，这类镜像被称为“虚悬镜像”，无用。\n\n根据镜像创建容器\n\n```\n# -i: 交互式操作\n# -t: 终端\ndocker run -i -t <name:tag> /bin/bash/\n```\n\n镜像删除\n\n```\ndocker rmi <name:tag>\n```\n\n## 操作本地容器\n\n通过镜像创建的容器实例，一般我们也只用关心简单的启动、停止和删除。\n\n查看本地容器\n\n```\ndocker ps -a\n```\n\n其它\n\n```\n# 启动\ndocker start <ID>\n\n# 停止\ndocker stop <ID>\n\n# 删除\ndocker rm -f <ID>\n```\n\n## 发布镜像\n\n上面我们创建镜像的时候会指定 tag，也可以单独指定 tag。\n\n```\ndocker tag <ID> <name:新的tag>\n```\n\n创建后会看到本地新增了一条镜像记录。\n\n本地创建镜像后，便可以直接 push 到仓库\n\n```\ndocker push <repository/name:tag>\n```\n\n这里需要自己注册 docker hub 的账号，并创建相应的仓库。\n\n## 一些需要注意的点\n\n创建的构建文件名按照约定必须是 `Dockerfile`\n\n构建时的 context 指定需要慎重，需要将当前目录无关的文件剔除，其余文件都会作为上下文去构建当前镜像，譬如我们要做 `COPY` 操作，对于相对路径就是依赖上下文 context。\n\n我们可以使用 `.dockerignore` 来剔除无关文件，语法和 `.gitignore` 一致。\n\nDockerfile 的书写规范，语法类似 shell 语法，只不过需要使用 docker 的关键字命令来处理。\n\ndocker 中的关键字命令都会单独创建一个层来执行，一般对于前端命令，是没有必要创建多个层也就是多个 `RUN` 命令的，应该一行语句写完。\n\n## 参考\n\n- [Docker 教程](https://www.runoob.com/docker/docker-tutorial.html)\n- [Docker 从入门到实践](https://yeasy.gitbook.io/docker_practice/)\n\n\n\n\n\n",
		"attachments": "[]",
		"gmtCreate": "2020-09-21 16:12:17",
		"gmtModified": "2020-09-22 09:43:49",
		"creator": {
			"id": "269840",
			"mobile": "18358185826",
			"name": "杨明"
		},
		"modifier": {
			"id": "269840",
			"mobile": "18358185826",
			"name": "杨明"
		},
		"histories": [{
			"id": 114,
			"gmtModified": "2020-09-22 09:43:49",
			"modifier": {
				"id": "269840",
				"mobile": "18358185826",
				"name": "杨明",
				"tags": 7
			}
		}]
	},
	{
		"id": 170,
		"name": "docker 的入门与使用2",
		"branchId": 60,
		"projectId": 47,
		"catelogId": 68,
		"creatorId": "269840",
		"modifiedId": "269840",
		"content": "![](https://blog.papercut.com/wp-content/uploads/2019/02/docker-logo-1024x597.png)\n\n> 图片来源：https://blog.papercut.com/wp-content/uploads/2019/02/docker-logo-1024x597.png\n\n[TOC]\n\n## 前言\n\nDocker 对于前端来说不是必须的，但是如果需要自己折腾前端工具、建站等，涉及到应用部署的话就必须要去了解下相关知识了。\n\n本文只是对 Docker 的入门，看完本文后会对 Docker 的概念以及如何使用 docker 有个初步的认知。\n\n对于前端来说，有个入门的认识应该就够了。\n\n## Docker 的概念\n\ndocker 音译过来是“容器”，但是 docker 有三大概念：\n\n- 镜像 image\n- 容器 container\n- 仓库 repository\n\n镜像和容器的关系就如 JS 中的类与实例。\n\n在 JS 中，我们常用的包管理工具 npm，我们会将 npm 包 `npm publish` 到免费的公共服务上。\n\n而 docker 的镜像就如同托管在远程服务的 npm 包一样，docker 也有托管服务 `Docker Hub`，我们可以创建自己的 **仓库** Respository，本地通过 `docker push <仓库/name:tag>`\n\n同理，我们通过 `npm install` 安装在本地 `node_modules` 中的包的“形态”，就类似 **容器** container。\n\n关于 docker 的其他概念或作用，网上都能找到，就不再赘述了。\n\n## 构建镜像\n\n譬如，我有一个需求，是将一个 npm 命令行工具构建成 docker 包，并 push 到远程仓库，提供给运维部署时用。\n\n首先我的思路有 2 种：\n\n> 该镜像必然依赖 node，暂且是 `node:latest` 好了，因为不需要考虑其他功能。\n\n1. 在本地 npm 包的根目录下构建 docker 镜像，将完整的包构建进去，这样就不用再下载了\n2. 构建空的镜像，其中包含一条执行命令，去安装该 npm 包\n\n于是，我去实践这 2 种思路。\n\n实践的结果当然只能是方案二合理，因为构建的 docker 包，虽然上下文指定了当前目录，但是并未将文件拷贝到对应的 root 的文件系统中。需要自己去 `COPY`，但是 copy 只能单个文件。\n\n想想 node_modules 吧，因为 npm 命令行工具依赖。\n\n于是乎，将 npm 包压缩成一个 zip 包后再 copy 到文件系统中似乎可行。的确如此！但是 copy 的过程也是很慢的，node_modules 的嵌套依赖太过庞大。\n\n所以总的来看，通过在 node 容器中，执行安装命令**清晰易懂**\n\n构建命令：\n\n```\n# -t 表示指定要创建的目标镜像名\n# tag 默认为 latest\n# context 表示构建上下文，下文会说\ndocker build -t <name:tag> <context>\n```\n\n## 操作本地镜像\n\n查看本地镜像\n\n```\ndocker images\ndocker image ls\n```\n\n> 有时候会出现 <none> 的镜像，可以使用 docker image prune 清除，这类镜像被称为“虚悬镜像”，无用。\n\n根据镜像创建容器\n\n```\n# -i: 交互式操作\n# -t: 终端\ndocker run -i -t <name:tag> /bin/bash/\n```\n\n镜像删除\n\n```\ndocker rmi <name:tag>\n```\n\n## 操作本地容器\n\n通过镜像创建的容器实例，一般我们也只用关心简单的启动、停止和删除。\n\n查看本地容器\n\n```\ndocker ps -a\n```\n\n其它\n\n```\n# 启动\ndocker start <ID>\n\n# 停止\ndocker stop <ID>\n\n# 删除\ndocker rm -f <ID>\n```\n\n## 发布镜像\n\n上面我们创建镜像的时候会指定 tag，也可以单独指定 tag。\n\n```\ndocker tag <ID> <name:新的tag>\n```\n\n创建后会看到本地新增了一条镜像记录。\n\n本地创建镜像后，便可以直接 push 到仓库\n\n```\ndocker push <repository/name:tag>\n```\n\n这里需要自己注册 docker hub 的账号，并创建相应的仓库。\n\n## 一些需要注意的点\n\n创建的构建文件名按照约定必须是 `Dockerfile`\n\n构建时的 context 指定需要慎重，需要将当前目录无关的文件剔除，其余文件都会作为上下文去构建当前镜像，譬如我们要做 `COPY` 操作，对于相对路径就是依赖上下文 context。\n\n我们可以使用 `.dockerignore` 来剔除无关文件，语法和 `.gitignore` 一致。\n\nDockerfile 的书写规范，语法类似 shell 语法，只不过需要使用 docker 的关键字命令来处理。\n\ndocker 中的关键字命令都会单独创建一个层来执行，一般对于前端命令，是没有必要创建多个层也就是多个 `RUN` 命令的，应该一行语句写完。\n\n## 参考\n\n- [Docker 教程](https://www.runoob.com/docker/docker-tutorial.html)\n- [Docker 从入门到实践](https://yeasy.gitbook.io/docker_practice/)\n\n\n\n\n\n",
		"attachments": "[]",
		"gmtCreate": "2020-09-21 16:12:17",
		"gmtModified": "2020-09-22 09:43:49",
		"creator": {
			"id": "269840",
			"mobile": "18358185826",
			"name": "杨明"
		},
		"modifier": {
			"id": "269840",
			"mobile": "18358185826",
			"name": "杨明"
		},
		"histories": [{
			"id": 114,
			"gmtModified": "2020-09-22 09:43:49",
			"modifier": {
				"id": "269840",
				"mobile": "18358185826",
				"name": "杨明",
				"tags": 7
			}
		}]
	}

]
